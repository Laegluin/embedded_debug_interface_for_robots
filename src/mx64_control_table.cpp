#include "mx64_control_table.h"

// See <http://emanual.robotis.com/docs/en/dxl/mx/mx-64-2/>

Mx64ControlTable::Mx64ControlTable() {
    this->data.write_uint16(0, 311);
    this->data.write_uint8(7, 1);
    this->data.write_uint8(8, 1);
    this->data.write_uint8(9, 250);
    this->data.write_uint8(10, 0);
    this->data.write_uint8(11, 3);
    this->data.write_uint8(12, 255);
    this->data.write_uint8(13, 2);
    this->data.write_uint32(20, 0);
    this->data.write_uint32(24, 10);
    this->data.write_uint8(31, 80);
    this->data.write_uint16(32, 160);
    this->data.write_uint16(34, 95);
    this->data.write_uint16(36, 885);
    this->data.write_uint16(38, 1941);
    this->data.write_uint32(40, 32767);
    this->data.write_uint32(44, 285);
    this->data.write_uint32(48, 4095);
    this->data.write_uint32(52, 0);
    this->data.write_uint8(63, 52);
    this->data.write_uint8(64, 0);
    this->data.write_uint8(65, 0);
    this->data.write_uint8(68, 2);
    this->data.write_uint8(69, 0);
    this->data.write_uint8(70, 0);
    this->data.write_uint16(76, 1920);
    this->data.write_uint16(78, 100);
    this->data.write_uint16(80, 0);
    this->data.write_uint16(82, 0);
    this->data.write_uint16(84, 850);
    this->data.write_uint16(88, 0);
    this->data.write_uint16(90, 0);
    this->data.write_uint8(98, 0);
    this->data.write_uint32(108, 0);
    this->data.write_uint32(112, 0);
    this->data.write_uint8(122, 0);
    this->data.write_uint8(123, 0);

    this->addr_map_1.write_uint16(168, 224);
    this->addr_map_1.write_uint16(170, 225);
    this->addr_map_1.write_uint16(172, 226);
    this->addr_map_1.write_uint16(174, 227);
    this->addr_map_1.write_uint16(176, 228);
    this->addr_map_1.write_uint16(178, 229);
    this->addr_map_1.write_uint16(180, 230);
    this->addr_map_1.write_uint16(182, 231);
    this->addr_map_1.write_uint16(184, 232);
    this->addr_map_1.write_uint16(186, 233);
    this->addr_map_1.write_uint16(188, 234);
    this->addr_map_1.write_uint16(190, 235);
    this->addr_map_1.write_uint16(192, 236);
    this->addr_map_1.write_uint16(194, 237);
    this->addr_map_1.write_uint16(196, 238);
    this->addr_map_1.write_uint16(198, 239);
    this->addr_map_1.write_uint16(200, 240);
    this->addr_map_1.write_uint16(202, 241);
    this->addr_map_1.write_uint16(204, 242);
    this->addr_map_1.write_uint16(206, 243);
    this->addr_map_1.write_uint16(208, 244);
    this->addr_map_1.write_uint16(210, 245);
    this->addr_map_1.write_uint16(212, 246);
    this->addr_map_1.write_uint16(214, 247);
    this->addr_map_1.write_uint16(216, 248);
    this->addr_map_1.write_uint16(218, 249);
    this->addr_map_1.write_uint16(220, 250);
    this->addr_map_1.write_uint16(222, 251);

    this->addr_map_2.write_uint16(578, 634);
    this->addr_map_2.write_uint16(580, 635);
    this->addr_map_2.write_uint16(582, 636);
    this->addr_map_2.write_uint16(584, 637);
    this->addr_map_2.write_uint16(586, 638);
    this->addr_map_2.write_uint16(588, 639);
    this->addr_map_2.write_uint16(590, 640);
    this->addr_map_2.write_uint16(592, 641);
    this->addr_map_2.write_uint16(594, 642);
    this->addr_map_2.write_uint16(596, 643);
    this->addr_map_2.write_uint16(598, 644);
    this->addr_map_2.write_uint16(600, 645);
    this->addr_map_2.write_uint16(602, 646);
    this->addr_map_2.write_uint16(604, 647);
    this->addr_map_2.write_uint16(606, 648);
    this->addr_map_2.write_uint16(608, 649);
    this->addr_map_2.write_uint16(610, 650);
    this->addr_map_2.write_uint16(612, 651);
    this->addr_map_2.write_uint16(614, 652);
    this->addr_map_2.write_uint16(616, 653);
    this->addr_map_2.write_uint16(618, 654);
    this->addr_map_2.write_uint16(620, 655);
    this->addr_map_2.write_uint16(622, 656);
    this->addr_map_2.write_uint16(624, 657);
    this->addr_map_2.write_uint16(626, 658);
    this->addr_map_2.write_uint16(628, 659);
    this->addr_map_2.write_uint16(630, 660);
    this->addr_map_2.write_uint16(632, 661);
}

void Mx64ControlTable::entries(std::unordered_map<const char*, std::string>& name_to_value) const {
    name_to_value.emplace("Model Number", std::to_string(this->data.uint16_at(0)));
    name_to_value.emplace("Model Information", std::to_string(this->data.uint32_at(2)));
    name_to_value.emplace("Firmware Version", std::to_string(this->data.uint8_at(6)));
    name_to_value.emplace("Id", std::to_string(this->data.uint8_at(7)));
    name_to_value.emplace("Baud Rate", std::to_string(this->data.uint8_at(8)));
    name_to_value.emplace("Return Delay Time", std::to_string(this->data.uint8_at(9)));
    name_to_value.emplace("Drive Mode", std::to_string(this->data.uint8_at(10)));
    name_to_value.emplace("Operating Mode", std::to_string(this->data.uint8_at(11)));
    name_to_value.emplace("Secondary Id", std::to_string(this->data.uint8_at(12)));
    name_to_value.emplace("Protocol Type", std::to_string(this->data.uint8_at(13)));
    name_to_value.emplace("Homing Offset", std::to_string(this->data.uint32_at(20)));
    name_to_value.emplace("Moving Threshold", std::to_string(this->data.uint32_at(24)));
    name_to_value.emplace("Temperature Limit", std::to_string(this->data.uint8_at(31)));
    name_to_value.emplace("Max Voltage Limit", std::to_string(this->data.uint16_at(32)));
    name_to_value.emplace("Min Voltage Limit", std::to_string(this->data.uint16_at(34)));
    name_to_value.emplace("PWM Limit", std::to_string(this->data.uint16_at(36)));
    name_to_value.emplace("Current Limit", std::to_string(this->data.uint16_at(38)));
    name_to_value.emplace("Acceleration Limit", std::to_string(this->data.uint32_at(40)));
    name_to_value.emplace("Velocity Limit", std::to_string(this->data.uint32_at(44)));
    name_to_value.emplace("Max Position Limit", std::to_string(this->data.uint32_at(48)));
    name_to_value.emplace("Min Position Limit", std::to_string(this->data.uint32_at(52)));
    name_to_value.emplace("Shutdown", std::to_string(this->data.uint8_at(63)));
    name_to_value.emplace("Torque Enable", std::to_string(this->data.uint8_at(64)));
    name_to_value.emplace("LED", std::to_string(this->data.uint8_at(65)));
    name_to_value.emplace("Status Return Level", std::to_string(this->data.uint8_at(68)));
    name_to_value.emplace("Registered Instruction", std::to_string(this->data.uint8_at(69)));
    name_to_value.emplace("Hardware Error Status", std::to_string(this->data.uint8_at(70)));
    name_to_value.emplace("Velocity I-Gain", std::to_string(this->data.uint16_at(76)));
    name_to_value.emplace("Velocity P-Gain", std::to_string(this->data.uint16_at(78)));
    name_to_value.emplace("Position D-Gain", std::to_string(this->data.uint16_at(80)));
    name_to_value.emplace("Position I-Gain", std::to_string(this->data.uint16_at(82)));
    name_to_value.emplace("Position P-Gain", std::to_string(this->data.uint16_at(84)));
    name_to_value.emplace("Feedforward 2nd Gain", std::to_string(this->data.uint16_at(88)));
    name_to_value.emplace("Feedforward 1st Gain", std::to_string(this->data.uint16_at(90)));
    name_to_value.emplace("Bus Watchdog", std::to_string(this->data.uint8_at(98)));
    name_to_value.emplace("Goal PWM", std::to_string(this->data.uint16_at(100)));
    name_to_value.emplace("Goal Current", std::to_string(this->data.uint16_at(102)));
    name_to_value.emplace("Goal Velocity", std::to_string(this->data.uint32_at(104)));
    name_to_value.emplace("Profile Acceleration", std::to_string(this->data.uint32_at(108)));
    name_to_value.emplace("Profile Velocity", std::to_string(this->data.uint32_at(112)));
    name_to_value.emplace("Goal Position", std::to_string(this->data.uint32_at(116)));
    name_to_value.emplace("Realtime Tick", std::to_string(this->data.uint16_at(120)));
    name_to_value.emplace("Moving", std::to_string(this->data.uint8_at(122)));
    name_to_value.emplace("Moving Status", std::to_string(this->data.uint8_at(123)));
    name_to_value.emplace("Present PWM", std::to_string(this->data.uint16_at(124)));
    name_to_value.emplace("Present Current", std::to_string(this->data.uint16_at(126)));
    name_to_value.emplace("Present Velocity", std::to_string(this->data.uint32_at(128)));
    name_to_value.emplace("Present Position", std::to_string(this->data.uint32_at(132)));
    name_to_value.emplace("Velocity Trajectory", std::to_string(this->data.uint32_at(136)));
    name_to_value.emplace("Position Trajectory", std::to_string(this->data.uint32_at(140)));
    name_to_value.emplace("Present Input Voltage", std::to_string(this->data.uint16_at(144)));
    name_to_value.emplace("Present Temperature", std::to_string(this->data.uint8_at(146)));
}
